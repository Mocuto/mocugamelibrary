(function() {
	/**
	 * Represents a WebGL sprite render batch. Its purpose is to store the attribute values of
	 * consecutive sprites with the same batch key
	 * The batch key is generated based off of the criteria of sprite properties that cannot be 
	 * batched, such as texture, blending mode, etc.
	 *
	 * This facilitates batch rendering
	 * @constructor
	 * @param {string} key - The batch key, generated by a MocuRenderer instance
	 * @param {Array[MocuGlProperty]} - An array of MocuGlProperty objects, which will all be batch rendered in the same call
	*/

	mocu.GlBatch = function(textureSrc, properties) {
		this.textureSrc = textureSrc;
		this.properties = properties;
		this.primitivesRendered = 0;
	};

	Object.defineProperty(mocu.GlBatch.prototype, "key", {
		get : function() {
			return mocu.renderer.generateBatchKey(this.textureSrc)
		}
	})

	/*mocu.GlBatch.prototype.__defineGetter__("key", function() {
		return mocu.renderer.generateBatchKey(this.textureSrc)
	})*/


	/**
	* Returns the MocuGlProperty in mocu.GlBatch#properties with the given name
	* @param {string} name - The name of the desired MocuGlProperty
	*/
	mocu.GlBatch.prototype.getPropertyWithName = function(name) {
		for(var i = 0; i < this.properties.length; i++) {
			var prop = this.properties[i];

			if(prop.name == name) {
				return prop;
			}
		}

		return null;
	}

	/**
	* updates the MocuGlProperty with the given propertyName and the valueArray
	* @param {String} propertyName - the name of the desired MocuGlProperty
	* @param {Array[Number]} valueArray - Array of values to assign to the MocuGlProperty
	* @param {Number} startIndex - The index to begin updating the values
	* @param {Number} endIndex - The index to end updating the values
	*/

	mocu.GlBatch.prototype.updateProperty = function(propertyName, valueArray, startIndex, length) {
		var property = this.getPropertyWithName(propertyName);
		var endIndex = startIndex + length;
		property.update(valueArray, startIndex, endIndex);
	}
})();